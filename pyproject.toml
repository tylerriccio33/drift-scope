[project]
name = "drift-scope"
version = "0.0.3"
description = "Add your description here"
readme = "README.md"
authors = [{ name = "Tyler Riccio", email = "tylerriccio8@gmail.com" }]
requires-python = ">=3.12"
dependencies = [
    "narwhals>=1.27.1",
    "pyarrow>=19.0.1",
    "rich>=13.9.4",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "deptry>=0.23.0",
    "duckdb>=1.2.0",
    "mypy>=1.15.0",
    "polars>=1.22.0",
    "pre-commit>=4.1.0",
    "psycopg2-binary>=2.9.10",
    "pyarrow>=19.0.1",
    "pyarrow-stubs>=17.17",
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-randomly>=3.16.0",
    "righttyper>=0.0.10",
    "ruff>=0.9.6",
    "testcontainers>=4.9.1",
]

[tool.coverage.report]
exclude_also = [
    'def __repr__',
    'if __name__ == .__main__.:',
    'if TYPE_CHECKING:',
    'class .*\bProtocol\):',
    '@(abc\.)?abstractmethod',
]


[tool.mypy]
strict = true
disable_error_code = ['import-untyped', 'misc']

[tool.deptry.per_rule_ignores]
DEP003 = 'drift_scope'

[tool.deptry.package_module_name_map]
drift-scope = "drift_scope"

[tool.ruff]
line-length = 100
fix = true

[tool.ruff.lint]
select = [
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "D", # flake8-docstrings
  "E", # pycodestyle
  "EM", # flake8-errmsg
  "F", # pyflakes
  "FA", # flake8-future-annotations
  "FBT001", # flake8-boolean-trap
  "I", # isort
  "ICN", # flake8-import-conventions
  "INT", # flake8-gettext
  "PERF", # perflint
  "PIE", # flake8-pie
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "RUF", # ruff-specific rules
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "TD", # flake8-todos
  "TID", # flake8-tidy-imports
  "TRY", # tryceratops
  "UP", # pyupgrade
  "W", # pycodestyle
]

ignore = [
  "SIM117", # Single with statement for multiple contexts
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D105", # Missing docstring in magic method
  "ANN401", # Dynamically typed expressions (Any) are disallowed
  "D401", # Relax NumPy docstring convention: first line should be imperative
  "E501", # Line length regulated by formatter
  "PT011", # pytest.raises is too broad, set match or use a more specific exception
  "PYI041", # Use float instead of int | float
  "RUF022", # `__all__` is not sorted
  "RUF005", # Consider expression instead of concatenation
  "SIM102", # Use a single `if` statement instead of nested `if` statements
  "SIM108", # Use ternary operator
  "SIM114", # Combine `if` branches
  "TD002", # Missing author in TODO
  "TD003", # Missing issue link on the line following this TODO
  "TRY003", # Avoid specifying long messages outside the exception class
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
